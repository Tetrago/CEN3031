//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RoomMessage = newRoomMessageTable("public", "room_message", "")

type roomMessageTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	UserID   postgres.ColumnInteger
	RoomID   postgres.ColumnInteger
	Contents postgres.ColumnString
	Utc      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoomMessageTable struct {
	roomMessageTable

	EXCLUDED roomMessageTable
}

// AS creates new RoomMessageTable with assigned alias
func (a RoomMessageTable) AS(alias string) *RoomMessageTable {
	return newRoomMessageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoomMessageTable with assigned schema name
func (a RoomMessageTable) FromSchema(schemaName string) *RoomMessageTable {
	return newRoomMessageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoomMessageTable with assigned table prefix
func (a RoomMessageTable) WithPrefix(prefix string) *RoomMessageTable {
	return newRoomMessageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoomMessageTable with assigned table suffix
func (a RoomMessageTable) WithSuffix(suffix string) *RoomMessageTable {
	return newRoomMessageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoomMessageTable(schemaName, tableName, alias string) *RoomMessageTable {
	return &RoomMessageTable{
		roomMessageTable: newRoomMessageTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newRoomMessageTableImpl("", "excluded", ""),
	}
}

func newRoomMessageTableImpl(schemaName, tableName, alias string) roomMessageTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		UserIDColumn   = postgres.IntegerColumn("user_id")
		RoomIDColumn   = postgres.IntegerColumn("room_id")
		ContentsColumn = postgres.StringColumn("contents")
		UtcColumn      = postgres.IntegerColumn("utc")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, RoomIDColumn, ContentsColumn, UtcColumn}
		mutableColumns = postgres.ColumnList{UserIDColumn, RoomIDColumn, ContentsColumn, UtcColumn}
	)

	return roomMessageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		UserID:   UserIDColumn,
		RoomID:   RoomIDColumn,
		Contents: ContentsColumn,
		Utc:      UtcColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

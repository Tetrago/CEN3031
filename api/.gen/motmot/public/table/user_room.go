//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserRoom = newUserRoomTable("public", "user_room", "")

type userRoomTable struct {
	postgres.Table

	// Columns
	UserID postgres.ColumnInteger
	RoomID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserRoomTable struct {
	userRoomTable

	EXCLUDED userRoomTable
}

// AS creates new UserRoomTable with assigned alias
func (a UserRoomTable) AS(alias string) *UserRoomTable {
	return newUserRoomTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserRoomTable with assigned schema name
func (a UserRoomTable) FromSchema(schemaName string) *UserRoomTable {
	return newUserRoomTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserRoomTable with assigned table prefix
func (a UserRoomTable) WithPrefix(prefix string) *UserRoomTable {
	return newUserRoomTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserRoomTable with assigned table suffix
func (a UserRoomTable) WithSuffix(suffix string) *UserRoomTable {
	return newUserRoomTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserRoomTable(schemaName, tableName, alias string) *UserRoomTable {
	return &UserRoomTable{
		userRoomTable: newUserRoomTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newUserRoomTableImpl("", "excluded", ""),
	}
}

func newUserRoomTableImpl(schemaName, tableName, alias string) userRoomTable {
	var (
		UserIDColumn   = postgres.IntegerColumn("user_id")
		RoomIDColumn   = postgres.IntegerColumn("room_id")
		allColumns     = postgres.ColumnList{UserIDColumn, RoomIDColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return userRoomTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID: UserIDColumn,
		RoomID: RoomIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
